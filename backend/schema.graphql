# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type HomePage {
  id: ID!
  slug: String
  heroTitle_en: String
  heroTitle_ar: String
  heroDescription_en: String
  heroDescription_ar: String
  missionTitle_en: String
  missionTitle_ar: String
  missionDescription_en: String
  missionDescription_ar: String
  aboutUsTitle_en: String
  aboutUsTitle_ar: String
  aboutUsDescription_en: String
  aboutUsDescription_ar: String
  contactInfo_en: String
  contactInfo_ar: String
  createdAt: DateTime
  updatedAt: DateTime
}

input HomePageWhereUniqueInput {
  id: ID
}

input HomePageWhereInput {
  AND: [HomePageWhereInput!]
  OR: [HomePageWhereInput!]
  NOT: [HomePageWhereInput!]
  id: IDFilter
  slug: StringFilter
  heroTitle_en: StringFilter
  heroTitle_ar: StringFilter
  heroDescription_en: StringFilter
  heroDescription_ar: StringFilter
  missionTitle_en: StringFilter
  missionTitle_ar: StringFilter
  missionDescription_en: StringFilter
  missionDescription_ar: StringFilter
  aboutUsTitle_en: StringFilter
  aboutUsTitle_ar: StringFilter
  aboutUsDescription_en: StringFilter
  aboutUsDescription_ar: StringFilter
  contactInfo_en: StringFilter
  contactInfo_ar: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HomePageOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  heroTitle_en: OrderDirection
  heroTitle_ar: OrderDirection
  heroDescription_en: OrderDirection
  heroDescription_ar: OrderDirection
  missionTitle_en: OrderDirection
  missionTitle_ar: OrderDirection
  missionDescription_en: OrderDirection
  missionDescription_ar: OrderDirection
  aboutUsTitle_en: OrderDirection
  aboutUsTitle_ar: OrderDirection
  aboutUsDescription_en: OrderDirection
  aboutUsDescription_ar: OrderDirection
  contactInfo_en: OrderDirection
  contactInfo_ar: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HomePageUpdateInput {
  slug: String
  heroTitle_en: String
  heroTitle_ar: String
  heroDescription_en: String
  heroDescription_ar: String
  missionTitle_en: String
  missionTitle_ar: String
  missionDescription_en: String
  missionDescription_ar: String
  aboutUsTitle_en: String
  aboutUsTitle_ar: String
  aboutUsDescription_en: String
  aboutUsDescription_ar: String
  contactInfo_en: String
  contactInfo_ar: String
  createdAt: DateTime
  updatedAt: DateTime
}

input HomePageUpdateArgs {
  where: HomePageWhereUniqueInput!
  data: HomePageUpdateInput!
}

input HomePageCreateInput {
  slug: String
  heroTitle_en: String
  heroTitle_ar: String
  heroDescription_en: String
  heroDescription_ar: String
  missionTitle_en: String
  missionTitle_ar: String
  missionDescription_en: String
  missionDescription_ar: String
  aboutUsTitle_en: String
  aboutUsTitle_ar: String
  aboutUsDescription_en: String
  aboutUsDescription_ar: String
  contactInfo_en: String
  contactInfo_ar: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Service {
  id: ID!
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  imageUrl: String
}

input ServiceWhereUniqueInput {
  id: ID
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title_en: StringFilter
  title_ar: StringFilter
  description_en: StringFilter
  description_ar: StringFilter
  imageUrl: StringFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  title_en: OrderDirection
  title_ar: OrderDirection
  description_en: OrderDirection
  description_ar: OrderDirection
  imageUrl: OrderDirection
}

input ServiceUpdateInput {
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  imageUrl: String
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  imageUrl: String
}

type Project {
  id: ID!
  name_en: String
  name_ar: String
  clientName_en: String
  clientName_ar: String
  status_en: String
  status_ar: String
  workDone_en: String
  workDone_ar: String
  dateAcquired: String
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name_en: StringFilter
  name_ar: StringFilter
  clientName_en: StringFilter
  clientName_ar: StringFilter
  status_en: StringFilter
  status_ar: StringFilter
  workDone_en: StringFilter
  workDone_ar: StringFilter
  dateAcquired: StringFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  name_en: OrderDirection
  name_ar: OrderDirection
  clientName_en: OrderDirection
  clientName_ar: OrderDirection
  status_en: OrderDirection
  status_ar: OrderDirection
  workDone_en: OrderDirection
  workDone_ar: OrderDirection
  dateAcquired: OrderDirection
}

input ProjectUpdateInput {
  name_en: String
  name_ar: String
  clientName_en: String
  clientName_ar: String
  status_en: String
  status_ar: String
  workDone_en: String
  workDone_ar: String
  dateAcquired: String
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name_en: String
  name_ar: String
  clientName_en: String
  clientName_ar: String
  status_en: String
  status_ar: String
  workDone_en: String
  workDone_ar: String
  dateAcquired: String
}

type OurServicesPage {
  id: ID!
  slug: String
  ourServicesTitle_en: String
  ourServicesTitle_ar: String
  ourServicesDesc_en: String
  ourServicesDesc_ar: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input OurServicesPageWhereUniqueInput {
  id: ID
}

input OurServicesPageWhereInput {
  AND: [OurServicesPageWhereInput!]
  OR: [OurServicesPageWhereInput!]
  NOT: [OurServicesPageWhereInput!]
  id: IDFilter
  slug: StringFilter
  ourServicesTitle_en: StringFilter
  ourServicesTitle_ar: StringFilter
  ourServicesDesc_en: StringFilter
  ourServicesDesc_ar: StringFilter
  services: ServiceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input OurServicesPageOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  ourServicesTitle_en: OrderDirection
  ourServicesTitle_ar: OrderDirection
  ourServicesDesc_en: OrderDirection
  ourServicesDesc_ar: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OurServicesPageUpdateInput {
  slug: String
  ourServicesTitle_en: String
  ourServicesTitle_ar: String
  ourServicesDesc_en: String
  ourServicesDesc_ar: String
  services: ServiceRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input OurServicesPageUpdateArgs {
  where: OurServicesPageWhereUniqueInput!
  data: OurServicesPageUpdateInput!
}

input OurServicesPageCreateInput {
  slug: String
  ourServicesTitle_en: String
  ourServicesTitle_ar: String
  ourServicesDesc_en: String
  ourServicesDesc_ar: String
  services: ServiceRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

type Job {
  id: ID!
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  requirements_en: String
  requirements_ar: String
}

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  title_en: StringFilter
  title_ar: StringFilter
  description_en: StringFilter
  description_ar: StringFilter
  requirements_en: StringFilter
  requirements_ar: StringFilter
}

input JobOrderByInput {
  id: OrderDirection
  title_en: OrderDirection
  title_ar: OrderDirection
  description_en: OrderDirection
  description_ar: OrderDirection
  requirements_en: OrderDirection
  requirements_ar: OrderDirection
}

input JobUpdateInput {
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  requirements_en: String
  requirements_ar: String
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  requirements_en: String
  requirements_ar: String
}

type Recruitment {
  id: ID!
  slug: String
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  jobs(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input RecruitmentWhereUniqueInput {
  id: ID
}

input RecruitmentWhereInput {
  AND: [RecruitmentWhereInput!]
  OR: [RecruitmentWhereInput!]
  NOT: [RecruitmentWhereInput!]
  id: IDFilter
  slug: StringFilter
  title_en: StringFilter
  title_ar: StringFilter
  description_en: StringFilter
  description_ar: StringFilter
  jobs: JobManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input JobManyRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input RecruitmentOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title_en: OrderDirection
  title_ar: OrderDirection
  description_en: OrderDirection
  description_ar: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RecruitmentUpdateInput {
  slug: String
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  jobs: JobRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input JobRelateToManyForUpdateInput {
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input RecruitmentUpdateArgs {
  where: RecruitmentWhereUniqueInput!
  data: RecruitmentUpdateInput!
}

input RecruitmentCreateInput {
  slug: String
  title_en: String
  title_ar: String
  description_en: String
  description_ar: String
  jobs: JobRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input JobRelateToManyForCreateInput {
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

type AboutCompany {
  id: ID!
  slug: String
  title_en: String
  title_ar: String
  introduction_en: String
  introduction_ar: String
  vision_en: String
  vision_ar: String
  mission_en: String
  mission_ar: String
  coreValues_en: String
  coreValues_ar: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AboutCompanyWhereUniqueInput {
  id: ID
}

input AboutCompanyWhereInput {
  AND: [AboutCompanyWhereInput!]
  OR: [AboutCompanyWhereInput!]
  NOT: [AboutCompanyWhereInput!]
  id: IDFilter
  slug: StringFilter
  title_en: StringFilter
  title_ar: StringFilter
  introduction_en: StringFilter
  introduction_ar: StringFilter
  vision_en: StringFilter
  vision_ar: StringFilter
  mission_en: StringFilter
  mission_ar: StringFilter
  coreValues_en: StringFilter
  coreValues_ar: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AboutCompanyOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title_en: OrderDirection
  title_ar: OrderDirection
  introduction_en: OrderDirection
  introduction_ar: OrderDirection
  vision_en: OrderDirection
  vision_ar: OrderDirection
  mission_en: OrderDirection
  mission_ar: OrderDirection
  coreValues_en: OrderDirection
  coreValues_ar: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AboutCompanyUpdateInput {
  slug: String
  title_en: String
  title_ar: String
  introduction_en: String
  introduction_ar: String
  vision_en: String
  vision_ar: String
  mission_en: String
  mission_ar: String
  coreValues_en: String
  coreValues_ar: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AboutCompanyUpdateArgs {
  where: AboutCompanyWhereUniqueInput!
  data: AboutCompanyUpdateInput!
}

input AboutCompanyCreateInput {
  slug: String
  title_en: String
  title_ar: String
  introduction_en: String
  introduction_ar: String
  vision_en: String
  vision_ar: String
  mission_en: String
  mission_ar: String
  coreValues_en: String
  coreValues_ar: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createHomePage(data: HomePageCreateInput!): HomePage
  createHomePages(data: [HomePageCreateInput!]!): [HomePage]
  updateHomePage(where: HomePageWhereUniqueInput!, data: HomePageUpdateInput!): HomePage
  updateHomePages(data: [HomePageUpdateArgs!]!): [HomePage]
  deleteHomePage(where: HomePageWhereUniqueInput!): HomePage
  deleteHomePages(where: [HomePageWhereUniqueInput!]!): [HomePage]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createOurServicesPage(data: OurServicesPageCreateInput!): OurServicesPage
  createOurServicesPages(data: [OurServicesPageCreateInput!]!): [OurServicesPage]
  updateOurServicesPage(where: OurServicesPageWhereUniqueInput!, data: OurServicesPageUpdateInput!): OurServicesPage
  updateOurServicesPages(data: [OurServicesPageUpdateArgs!]!): [OurServicesPage]
  deleteOurServicesPage(where: OurServicesPageWhereUniqueInput!): OurServicesPage
  deleteOurServicesPages(where: [OurServicesPageWhereUniqueInput!]!): [OurServicesPage]
  createJob(data: JobCreateInput!): Job
  createJobs(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updateJobs(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteJobs(where: [JobWhereUniqueInput!]!): [Job]
  createRecruitment(data: RecruitmentCreateInput!): Recruitment
  createRecruitments(data: [RecruitmentCreateInput!]!): [Recruitment]
  updateRecruitment(where: RecruitmentWhereUniqueInput!, data: RecruitmentUpdateInput!): Recruitment
  updateRecruitments(data: [RecruitmentUpdateArgs!]!): [Recruitment]
  deleteRecruitment(where: RecruitmentWhereUniqueInput!): Recruitment
  deleteRecruitments(where: [RecruitmentWhereUniqueInput!]!): [Recruitment]
  createAboutCompany(data: AboutCompanyCreateInput!): AboutCompany
  createAboutCompanies(data: [AboutCompanyCreateInput!]!): [AboutCompany]
  updateAboutCompany(where: AboutCompanyWhereUniqueInput!, data: AboutCompanyUpdateInput!): AboutCompany
  updateAboutCompanies(data: [AboutCompanyUpdateArgs!]!): [AboutCompany]
  deleteAboutCompany(where: AboutCompanyWhereUniqueInput!): AboutCompany
  deleteAboutCompanies(where: [AboutCompanyWhereUniqueInput!]!): [AboutCompany]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  homePage(where: HomePageWhereUniqueInput!): HomePage
  homePages(where: HomePageWhereInput! = {}, orderBy: [HomePageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomePageWhereUniqueInput): [HomePage!]
  homePagesCount(where: HomePageWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  ourServicesPage(where: OurServicesPageWhereUniqueInput!): OurServicesPage
  ourServicesPages(where: OurServicesPageWhereInput! = {}, orderBy: [OurServicesPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OurServicesPageWhereUniqueInput): [OurServicesPage!]
  ourServicesPagesCount(where: OurServicesPageWhereInput! = {}): Int
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  recruitment(where: RecruitmentWhereUniqueInput!): Recruitment
  recruitments(where: RecruitmentWhereInput! = {}, orderBy: [RecruitmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecruitmentWhereUniqueInput): [Recruitment!]
  recruitmentsCount(where: RecruitmentWhereInput! = {}): Int
  aboutCompany(where: AboutCompanyWhereUniqueInput!): AboutCompany
  aboutCompanies(where: AboutCompanyWhereInput! = {}, orderBy: [AboutCompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutCompanyWhereUniqueInput): [AboutCompany!]
  aboutCompaniesCount(where: AboutCompanyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
